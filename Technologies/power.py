# 
# This script generates the value of energy generated by the technologies related to Poer
# 
# This values will be used in my_indicators.py in 'set up()'
#
# Consider that scenario will modify the value of the output 
#
# Naming for functions: get_tech_gen(scenario)
# tech : the name used in my_indicators function 'propagate_tech()'
# at last each function will have the input of scenario 0/1
# (e.g. get_solar_power_gen(latitude, longitude, cellSize, scenario) for propagate_solar_panel())
#  
#Change line:166, 179, 143

import requests
import json

# solar energy technology
def get_solar_power(latitude, longitude, cellSize, scenario): #before get_solar_power_gen(lat, lon, area)
	'''
	this function will be called directly from Terascope Tool; will call the pv_watts_get function to get necessary solar data.
	paramters:
		latitude : float : latitude of location to use, range -90 to 90
		longitude : float : longitude of location to use, range -180 to 180
		cellSize : float : area of covered by each cell in terascope tool (m^2)
			- only 50% of the area will be assumed for solar power system installation
		scenario : int [0, 1, 2] : Timeline, this will change the efficiency according to the predictions for the technology
			0 represents the present : 15% efficiency 
			1 represents +10 years : 30% efficiency
			2 represents +50 years : 95% efficiency 
	returns:
		dictionary including : "system_capacity_kW", "latitude", "longitude", "scenario",  
								"annual_generation_kWh", "monthly_generation_kWh"
	methods:
		lambda = power generated = (efficiency used in pv_watts) * (solar radition) * (some other factors)
		power generated w/increased efficiency = (lambda / (efficiency used in pv_watts)) * (increased efficiency) 
											   = (solar radition) * (some other factors) * (increased efficiency)
	'''

	def pv_watts_get(sys_cap, lat, lon, array_type, time_frame='monthly', mod_type=1, losses=14.08, tilt=20, azimuth=180):
		'''
		requests GET API call to PV watts 
		parameters:
			api_key : str : my_api_key
			sys_cap : float : name plate capacity (kW), range 0.05-500000
			lat : float : latitude of location to use, range -90 to 90
			lon : float : longitude of location to use, range -180 to 180
			array_type : int : array type (0, 1, 2, 3, 4)
				0 = fixed - open rack (ground)
				1 = fixed - roof mounted (household roof)
				2 = 1-Axis
				3 = 1-Axis Backtracking
				4 = 2-Axis
			time_frame : str : granularity of the output response, monthly or hourly
			module_type : int : module type 
				0 = standard, crystalline silicon, 15% nominal efficiency, glass 
				1 = premium, crystalline silicon, 19% nominal  efficiency, glass with anti-reflective coating
				2 = thin film, thin film, 10% glass
			losses : float : percent system losses, range -5 to 99 
			tilt : float : tilt angle (degrees), range 0 to 90
			azimuth : float : azimuth angle (degrees), <360
			address : string : required if latitude, lon are not specified
		returns json:
			ac_monthly : list : monthly AC system output (kWhac)
			poa_monthly : list : monthly plane of array irradiance values. (kWh/m2)
			dc_monthly : list : Monthly DC array output. (kWhdc)
			solrad_monthly : list : Monthly solar radiation values. (kWh/m2/day)
			ac_annual : float : Annual AC system output. (kWhac)
			solrad_annual : float : Annual solar radiation values. (kWh/m2/day)
			capacity_factor : float : The ratio of the system's predicted electrical output in 
				the first year of operation to the nameplate output, which is equivalent to the 
				quantity of energy the system would generate if it operated at its nameplate 
				capacity for every hour of the year. (AC-to-DC)
		API details: https://developer.nrel.gov/docs/solar/pvwatts/v6/#examples
		'''

		# url creation for API get request
		nrel_url = "https://developer.nrel.gov"
		pvwatts_url = "/api/pvwatts/v6.json?"
		my_api_key = 'HL6NnxupaYwtWc2K8oJfwYkrsoJGRvGAaz2sfdBz'

		params = {
			"api_key": my_api_key, "system_capacity": sys_cap, 
		    "module_type": mod_type, "losses": losses, "array_type": array_type, 
		    "tilt": tilt, "azimuth": azimuth, "lat": lat, "lon":lon
		}

		# create url string with all desginated parameters
		url = nrel_url + pvwatts_url
		for key, value in params.items(): 
			url += key + "=" + str(value) + '&'

		# remove last '&'
		url = url[:-1]
		print('URL :', url)

		headers = {
		    'content-type': "application/x-www-form-urlencoded",
		    'cache-control': "no-cache"
		}

		# GET request to url 
		response = requests.request("GET", url, headers=headers)

		return response.json()

	# panel type = 210 W/m^2
	# divide by 1000 to convert to kW
	sys_cap = cellSize*0.5*210/1000 

	# pv watts data of roof mounted system
	pv_watts_data = dict(pv_watts_get(sys_cap, float(latitude), float(longitude), array_type=1))
	if pv_watts_data['errors']:
		print('Errors', pv_watts_data['errors'])
	
	# effiency used in PV watts 
	mod_types = {0: 0.15, 1: 0.19, 2: 0.1}
	current_eff = mod_types[int(pv_watts_data["inputs"]["module_type"])]
	
	scenario_annual_pv_gen = 0
	scenario_monthly_pv_gen = []
	if scenario ==0:
		# 15% efficiency, generation (kWhac)
		scenario_annual_pv_gen = pv_watts_data["outputs"]["ac_annual"]
		scenario_monthly_pv_gen = pv_watts_data["outputs"]["ac_monthly"]

	elif scenario == 1:
		# 30% efficiency, 10+ yrs from today, generation (kWhac)
		future10_eff = 0.3
		scenario_annual_pv_gen = round((pv_watts_data["outputs"]["ac_annual"]/current_eff)*future10_eff,2)
		scenario_monthly_pv_gen = [round((i/current_eff)*future10_eff,2) for i in pv_watts_data["outputs"]["ac_monthly"]]

	elif scenario == 2:
		# 95% efficiency, 30+ yrs from today, generation (kWhac)
		future50_eff = 0.95
		scenario_annual_pv_gen = round((pv_watts_data["outputs"]["ac_annual"]/current_eff)*future50_eff,2)
		scenario_monthly_pv_gen = [round((i/current_eff)*future50_eff,2) for i in pv_watts_data["outputs"]["ac_monthly"]]

	results = {
		"system_capacity_kW":sys_cap, "latitude": latitude, "longitude": longitude, "scenario": scenario, 
		"annual_generation_kWh": scenario_annual_pv_gen, "monthly_generation_kWh": scenario_monthly_pv_gen}
	# results = {"annual_generation_kWh": scenario_annual_pv_gen} #cell, 20m2. We put 6 panels with 550 kW/h of energy per year from each panel on your roof
	# print(f'results:{results}')
	return results


# nuclear energy technology
def get_nuclear_energy(cellSize, scenario):
	'''
	this function will be called directly from Terascope Tool. it leverages MIT ANPEG research and Westinghouse product - eVinci micro nuclear reactor.
	links to more informagion:
		https://www.westinghousenuclear.com/Portals/0/new%20plants/evincitm/eVinci%20Micro%20Reactor%20NPJ%20M-A%202019.pdf?ver=2019-04-30-211410-367 
		https://www.westinghousenuclear.com/new-plants/evinci-micro-reactor
		https://anpeg.mit.edu/about
	paramters:
		cellSize : float : area of covered by each cell in terascope tool (m^2)
			- this technology is not dependant upon area, however requires a minimum space of 231.886 m^2 (eq. to 2496 ft^2 = 0.06 acre) -> round to 235 m^2
	returns:
		dictionary including : "max_system_capacity_kWh", "annual_generation_kWh", "monthly_generation_kWh"
			- one eVinci micro NR produces between 200 kWe and 500 MWe, meaning 200 kWh - 500,000 kWh
	'''

	if cellSize < 0: #original: # if cellSize < 235: #REVIEW THIS!
		return None

	else:
		min_system_capacity_kWh = 200
		max_system_capacity_kWh = 500000

		min_annual_generation_kWh = 200*24*365
		max_annual_generation_kWh = 500000*24*365

		min_monthly_generation_kWh = [200*24*30]*12 #this should be divided no?
		max_monthly_generation_kWh = [500000*24*30]*12

		results = {"min_system_capacity_kWh": min_system_capacity_kWh, "max_system_capacity_kWh": max_system_capacity_kWh, 
			"min_annual_generation_kWh": min_annual_generation_kWh, "max_annual_generation_kWh": max_annual_generation_kWh, 
			"min_monthly_generation_kWh": min_monthly_generation_kWh, "max_monthly_generation_kWh": max_monthly_generation_kWh}

	return results

def get_hydropower(scenario, river_size):
	'''
	param scenario : int [0, 1, 2] : Timeline, this will change the efficiencies according to the predictions for small/micro hydropower systems
		0 represents the present : efficiency = 70%
		1 represents +10 years : efficiency = 80%
		2 represents +50 years : efficiency = 90%
	param river_size : str ['small', 'medium', 'mainstem', 'large'] : the size of river determines the flow rate of the river, 
																	which then determines the overall power output of the system
			US river stream classifications:
				- small river = 1.133 - 5.663 m^3/s = 1133 - 5663 kg/s
				- medium river = 5.663 - 22.65 m^3/s = 5663 - 22650 kg/s
				- mainstem = 22.65 - 70.79 m^3/s = 22650 - 70790 kg/s
				- large river = 70.79 - 283.2 m^3/s = 70790 -283200 kg/s

	* note: large scale hydropower systems have an efficiency of 90% today, however we are considering the case of small/micro hydropower

	initial approach to hydropower included tracking water resources near informal settlement, however this approach was too complicated for the limited time.
	future research should include attempting this approach using the water resource data provided by earth engine (this was already started in file hydropower_earthengine.py)
	
	Current approach includes assuming many factors regarding water resource access and the potential energy from the water current. 
	assumptions include: 
		- there is access to a running water source with sufficient current/energy to power micro-hydropower source
		- access to this is enough to bring energy through distribution pipes to community
		- net head elevation = 30 m = 100 ft
		- US river stream classifications
			small river = 1.133 - 5.663 m^3/s = 1133 - 5663 kg/s
			medium river = 5.663 - 22.65 m^3/s = 5663 - 22650 kg/s
			mainstem = 22.65 - 70.79 m^3/s = 22650 - 70790 kg/s
			large river = 70.79 - 283.2 m^3/s = 70790 -283200 kg/s

	After assumptions are made, the potential energy provided by hypdropower is computed, cost of system, area needed by system, etc. 
	'''
	# efficiencies of small/micro hydropower systems = 0 (today), 1 (10+ years), 2 (50 + years)
	scenario_efficiency_microhydro = {0: 0.70, 1: 0.80, 2: 0.90}
	efficiency = scenario_efficiency_microhydro[scenario]
	
	# average river discharges (kg/s) by river size
	avg_river_discharge = {'small': 3398, 'medium': 14157, 'mainstem': 46720, 'large': 177000}

	# micro-hydropwoer plant average capacity size: elevation change (m) x discharge flow rate (kg/s) x 10 (conversion of kg*m/s -> W) = W
	elevation_m = 30

	# determine the flowrate by river size & compute system capacity
	flow_rate = avg_river_discharge[river_size]
	capacity_kW = efficiency*elevation_m*flow_rate*10/1000

	# compute annual and monthly power generation of system
	annual_generation_kWh = capacity_kW*24*365
	monthly_generation_kWh = [capacity_kW*24*30]*12

	# cost calculations, cost functions based off of www.hydro.org cost metrics
	cost = 0
	if capacity_kW <= 1000:
		cost = (4000 + 2*capacity_kW)*capacity_kW

	else:
		cost = (1000 + 5*capacity_kW)*capacity_kW

	results = {'scenario': scenario, 'efficiency (in decimals)': efficiency, 'river size': river_size, 'river discharge (kg/s)': flow_rate,
			"system capacity [kW]": capacity_kW, "system cost $": cost, "annual generation [kWh]": annual_generation_kWh, 
			"monthly generation [kWh]": monthly_generation_kWh}

	return results
	
def get_geothermal_energy(population, scenario):
	'''
	param population : type int : population of the informal settlement
	param scenario : int [0, 1, 2] : Timeline, this will change the Coefficient of performance (CoP) according to the predictions for the technology
		0 represents the present : CoP = 3.75 
		1 represents +10 years : CoP = 4.25
		2 represents +30 years : CoP = 4.75

	Using these two parameters, calculates the necessary capacity, cost, and generation of the 
	community-scale geothermal heat pump system (GHPS)
	
	Important notes:
		- according to EIA, 70% of household energy consumption is used for heating, cooling, ventillation, etc (HVAC)
		- according to EIA, average energy consumption per person per year = 305M Btu = 89,387 kWh => 245 kWh/person/day = 10.2 kW/person
			- average energy consumption of world = 3 kW/person
		- Coefficient of Performance = 3.5-4.0 -> for every unit of electricity input into compression, 3.5-4 units of HVAC are produced
	'''
	# calculate the needed capacity of the GHPS in kW
	consumption = 3*population
	scenario_coeff_performance = {0: 3.75, 1: 4.25, 2: 4.75}

	def geothermal_CoP(CoP):
		capacity = 0.5*consumption/CoP

		# pipe_network represents the length of pipes that connect from central system to houses in meters 
		# see Energy Tech document for details on assumptions of pipe lenght
		pipe_network = 0
		if population <= 300:
			pipe_network = 750

		elif population <= 750:
			pipe_network = 1500

		elif population <= 1500:
			pipe_network = 2250

		elif population < 3000:
			pipe_network = 3000

		else:
			pipe_network = population

		# Cost GHP for a community development = $2,500/ton = $2,500/3.5 kW
		# multiply times capacity [kW] = $
		cost = 2500/3.5*capacity 
		
		annual_generation_kWh = capacity*24*365
		monthly_generation_kWh = [capacity*24*30]*12

		energy_density = 0.05

		results = {"CoP": CoP, "system capacity [kW]": capacity, "system cost $": cost, "annual generation [kWh]": annual_generation_kWh, 
				"monthly generation [kWh]": monthly_generation_kWh, "energy density [J/m^3]": energy_density}

		return results

	CoP = scenario_coeff_performance[scenario]
	scenario_results = {"scenario" : scenario}
	geo_results = geothermal_CoP(CoP)
	
	scenario_results.update(geo_results)

	return scenario_results

# EXAMPLES #
#########################################################################
## EXAMPLE GET_SOLAR_POWER
#########################################################################
# area = 187900 # this is area of Jalisco /1000; area of Jalisco = 187.9 million m^2
# lat = 20.65
# lon = -103.26

# pv_generation = get_solar_power(lat, lon, area, scenario=0)
# print(pv_generation)

###############################
# OUTPUT GET_SOLAR_POWER
###############################
# {'system_capacity_kW': 19729.5, 'lat': 20.65, 'lon': -103.26, 
# 	'scenario': 0, 'annual_generation_kWh': 35569416.0, 
# 	'monthly_generation_kWh': [2908829.0, 2885999.25, 3518535.25, 3312188.25, 3169752.75, 2696853.0, 2736674.5, 2892661.5, 2708767.5, 3031611.25, 2907324.5, 2800213.5]} 

#########################################################################
## EXAMPLE GET_NUCLEAR_ENERGY
#########################################################################
# nuc_energy = get_nuclear_energy(cellSize = 300)
# print(nuc_energy)

###############################
# OUTPUT GET_NUCLEAR_ENERGY
###############################
# {'min_system_capacity_kWh': 200, 'max_system_capacity_kWh': 500000, 
# 'min_annual_generation_kWh': 1752000, 'max_annual_generation_kWh': 4380000000, 
# 'min_monthly_generation_kWh': [144000, 144000, 144000, 144000, 144000, 144000, 144000, 144000, 144000, 144000, 144000, 144000], 
# 'max_monthly_generation_kWh': [360000000, 360000000, 360000000, 360000000, 360000000, 360000000, 360000000, 360000000, 360000000, 360000000, 360000000, 360000000]}

#########################################################################
## EXAMPLE GET_HYDROPOWER
#########################################################################
# hydro = get_hydropower(scenario = 0, river_size = 'small')
# print(hydro)

###############################
# OUTPUT GET_HYDROPOWER
###############################
# {'scenario': 0, 'efficiency (in decimals)': 0.7, 'river size': 'small', 'river discharge (kg/s)': 3398, 
# 'system capacity [kW]': 713.58, 'system cost $': 3872712.8328, 'annual generation [kWh]': 6250960.800000001, 
# 'monthly generation [kWh]': [513777.60000000003, 513777.60000000003, 513777.60000000003, 513777.60000000003, 513777.60000000003, 513777.60000000003, 513777.60000000003, 513777.60000000003, 513777.60000000003, 513777.60000000003, 513777.60000000003, 513777.60000000003]}

#########################################################################
## EXAMPLE GET_GEOTHERMAL_ENERGY
#########################################################################
# geo = get_geothermal_energy(population = 30000, scenario = 0)
# print(geo)

###############################
# OUTPUT GET_GEOTHERMAL_ENERGY
###############################
# {'scenario': 0, 'CoP': 3.75, 'system capacity [kW]': 12000.0, 'system cost $': 8571428.571428573, 
# 'annual generation [kWh]': 105120000.0, 
# 'monthly generation [kWh]': [8640000.0, 8640000.0, 8640000.0, 8640000.0, 8640000.0, 8640000.0, 8640000.0, 8640000.0, 8640000.0, 8640000.0, 8640000.0, 8640000.0], 'energy density [J/m^3]': 0.05}
